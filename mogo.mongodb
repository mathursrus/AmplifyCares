// MongoDB Playground

// get all collections
use('amplifycares-db-catita');
db.getCollectionNames();

// aggregate each of the times for Sid
use('amplifycares-db-catita');
db.self_care_stats.aggregate([{$match:{name:{$regex:"sidm@*"}, DateTime: {$gt: new Date('2023-09-02')}}}, 
{$group: {_id:"$DateTime", 
total_mental_health: {$sum:{$add:[{$toInt: "$mental_health_time"}]}},
total_physical_health: {$sum:{$add:[{$toInt: "$physical_health_time"}]}},
total_spiritual_health: {$sum:{$add:[{$toInt: "$spiritual_health_time"}]}},
total_societal_health: {$sum:{$add:[{$toInt: "$societal_health_time"}]}},
}}])


// find all self care entries with non-integer time values
use('amplifycares-db-catita');
db.self_care_stats.find({ mental_health_time: { $not: { $regex: /^[0-9]+(\.[0-9]+)?$/ }, $type: "string" } });
db.self_care_stats.find({ physical_health_time: { $not: { $regex: /^[0-9]+(\.[0-9]+)?$/ }, $type: "string" } });
db.self_care_stats.find({ spiritual_health_time: { $not: { $regex: /^[0-9]+(\.[0-9]+)?$/ }, $type: "string" } });
db.self_care_stats.find({ societal_health_time: { $not: { $regex: /^[0-9]+(\.[0-9]+)?$/ }, $type: "string" } });

// how many users 
use('amplifycares-db');
db.self_care_stats.aggregate([{$match:{name:{$regex:".*"}}}, {$group: {_id:"$name", total_count:{$sum:1}}}, {$group: {_id:null, num_users:{$sum:1}}}])

// all users with number of entries
use('amplifycares-db-catita');
db.self_care_stats.aggregate([{$match:{name:{$regex:".*@microsoft.com"}}}, {$group: {_id:"$name", total_count:{$sum:1}}}, {$sort: {"_id": -1}}])

// all teams
use('amplifycares-db-catita');
db.team_info.find();

// all invite
use('amplifycares-db-catita');
db.invite_info.find();

// all daily challenges
use('amplifycares-db-catita');
db.dailychallenge_info.find();

// populate many daily challenges
use('amplifycares-db-catita');
db.dailychallenge_info.insertOne({
  Date: new Date("2023-12-05"),
  challenge: "Spiritual Care -  Take 2 minutes to ponder the wisdom in this quote and how it relates to your own spiritual journey - The soul usually knows what to do to heal itself. The challenge is to silence the mind.",
  activityType: 3
  });

// delete some invites
use('amplifycares-db-catita');
db.dailychallenge_info.deleteMany({Date: {$gt: new Date('2023-11-24')}});

// delete some invites
use('amplifycares-db-catita');
db.invite_info.deleteMany({invite: {$regex:"User janebo@.*"}});

// find all entries on a particular date
use('amplifycares-db-catita');
db.self_care_stats.find({DateTime: { $gt: new Date('2023-09-18') }});

// find entry with id 
use('amplifycares-db-catita');
db.self_care_stats.findOne({ _id: ObjectId("64ff81e0aa705d46e4fce721")});

// find all entries for a user
use('amplifycares-db-catita');
db.self_care_stats.find({ name:"sidm@microsoft.com" }).sort({"DateTime":-1});

// find all entries for a user on a particular date
use('amplifycares-db-catita');
const targetDate = "9/7/2023"; // Example target date with time
const startOfDay = new Date(targetDate);
startOfDay.setHours(0, 0, 0, 0); // Set the time to midnight for the same day
const endOfDay = new Date(targetDate);
endOfDay.setHours(23, 59, 59, 999); // Set the time to 11:59:59.999 PM for the same day

db.self_care_stats.find({
  name: "sidm@microsoft.com",
  DateTime: {
    $gte: startOfDay,
    $lte: endOfDay
  }
});


// find matching entries
use('amplifycares-db-catita');
db.self_care_stats.find({ name: "ankitch@microsoft.com", DateTime: { $gt: new Date('2023-07-11') } });

// delete matching entries
use('amplifycares-db-catita');
db.self_care_stats.deleteMany({ name: "scotthas@microsoft.com" });

// find item by id
use('amplifycares-db');
db.self_care_stats.find({_id:"647402f868a332296451ccbe"});

/* Find median of mental health time across everyone */
use('amplifycares-db');
db.self_care_stats.aggregate([
  {
    $group: {
      _id: "$name",
      values: { $push: {$toInt: "$mental_health_time"} }
    }
  },
  {
    $sort: { "values": 1 }
  },
  {
    $project: {
      values: 1,
      count: { $size: "$values" }
    }
  },
  {
    $project: {
      median: {
        $cond: [
          { $eq: [{ $mod: [ "$count", 2 ] }, 0 ] },
          { $avg: [{ $slice: ["$values", { $divide: ["$count", 2] }, 2] }] },
          { $arrayElemAt: [ "$values", { $divide: [ { $subtract: [ "$count", 1 ] }, 2 ] } ] }
        ]
      }
    }
  },
  {
    $sort: { "_id": 1 }
  }
])

/* Find median of mental health time across everyday */
use('amplifycares-db');
db.self_care_stats.aggregate([
  {
    $group: {
      _id: "$DateTime",
      values: { $push: {$toInt: "$mental_health_time"} }
    }
  },
  {
    $sort: { "values": 1 }
  },
  {
    $project: {
      values: 1,
      count: { $size: "$values" }
    }
  },
  {
    $project: {
      median: {
        $cond: [
          { $eq: [{ $mod: [ "$count", 2 ] }, 0 ] },
          { $avg: [{ $slice: ["$values", { $divide: ["$count", 2] }, 2] }] },
          { $arrayElemAt: [ "$values", { $divide: [ { $subtract: [ "$count", 1 ] }, 2 ] } ] }
        ]
      }
    }
  },
  {
    $sort: { "_id": 1 }
  }
])

/* Find the total self care time for a particular person across everyday, also add all self-care acitivites */
use('amplifycares-db-catita');
let x = "sidm@microsoft.com";
let startDate = new Date("9/20/2023");
startDate.setUTCHours(0, 0, 0, 0);
let endDate = new Date("9/23/2023");
endDate.setUTCHours(23, 59, 59, 999);

let activity = "total";
let include_mental = activity === "total" || activity === "mental";
let include_physical = activity === "total" || activity === "physical";
let include_social = activity === "total" || activity === "social";
let include_spiritual = activity === "total" || activity === "spiritual";
db.self_care_stats.aggregate([
  {
    $match: {
      name: x,
      DateTime: {
        $gte: startDate,
        $lte: endDate
      }
    }
  },
  {
    $group: {
      _id: { $dateToString: { format: "%Y-%m-%d", date: "$DateTime" } },
      total_health_time: {
        $sum: {
          $add: [
            {
              $cond: [include_mental, { $toInt: { $ifNull: ["$mental_health_time", 0] } }, 0]
            },
            {
              $cond: [include_physical, { $toInt: { $ifNull: ["$physical_health_time", 0] } }, 0]
            },
            {
              $cond: [include_spiritual, { $toInt: { $ifNull: ["$spiritual_health_time", 0] } }, 0]
            },
            {
              $cond: [include_social, { $toInt: { $ifNull: ["$societal_health_time", 0] } }, 0]
            }
          ]
        }
      },
      activities: {
        $push: {
          $concatArrays: [
            {
              $cond: {
                if: {
                  $and: [
                    include_mental,
                    { $ne: [
                      { $ifNull: ["$mental_health_activity", null] },
                      null
                    ] } // Check if mental_health_activity is not null
                  ]
                },
                then: [["$mental_health_activity", { $ifNull: ["$mental_health_time", 0] }]],
                else: []
              }
            },
            {
              $cond: {
                if: {
                  $and: [
                    include_physical,
                    { $ne: [
                      { $ifNull: ["$physical_health_activity", null] },
                      null
                    ] } // Check if physical_health_activity is not null
                  ]
                },
                then: [["$physical_health_activity", { $ifNull: ["$physical_health_time", 0] }]],
                else: []
              }
            },
            {
              $cond: {
                if: {
                  $and: [
                    include_spiritual,
                    { $ne: [
                      { $ifNull: ["$spiritual_health_activity", null] },
                      null
                    ] } // Check if spiritual_health_activity is not null
                  ]
                },
                then: [["$spiritual_health_activity", { $ifNull: ["$spiritual_health_time", 0] }]],
                else: []
              }
            },
            {
              $cond: {
                if: {
                  $and: [
                    include_social,
                    { $ne: [
                      { $ifNull: ["$societal_health_activity", null] },
                      null
                    ] } // Check if societal_health_activity is not null
                  ]
                },
                then: [["$societal_health_activity", { $ifNull: ["$societal_health_time", 0] }]],
                else: []
              }
            }
          ]
        }
      }
    }
  },
  {
    $project: {
      total_health_time: 1,
      activities: {
        $reduce: {
          input: "$activities",
          initialValue: [],
          in: {
            $concatArrays: ["$$value", "$$this"]
          }
        }
      }
    }
  }
]);



/* Find Xth %ile of total self care time across everyday across everybody */
use('amplifycares-db-catita');
let x=50;
let startDay=new Date("9/1/2023");
let endDay=new Date("9/21/2023");
db.self_care_stats.aggregate([
  {
    $match: {
      DateTime: {
        $gte: (new Date(startDay)).setUTCHours(0, 0, 0, 0),
        $lte: (new Date(endDay)).setUTCHours(23, 59, 59, 999)
      }
    }
  },
  {
    $group: {
      _id: {
        DateTime: { $dateToString: { format: "%Y-%m-%d", date: "$DateTime" } },
        Name: "$name"
      },
      total_health_time: {
        $sum: {
            $add: [
            { $toInt: "$mental_health_time" },
            { $toInt: "$physical_health_time" },
            { $toInt: "$spiritual_health_time" },
            { $toInt: "$societal_health_time" }
            ]
        }
      },      
    }
  },
  {
    $sort: {"_id.DateTime":1, "total_health_time": 1 }
  },
  {
    $group: {
      _id: "$_id.DateTime",
      values: { $push: "$total_health_time" },
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      ptile: {
        $arrayElemAt: ["$values", {$floor: {$multiply: ["$count", x/100]}}]
      }
    }
  },
]);


/* Find X%ile of total health time and self care activities */
use('amplifycares-db-catita');
let x = 50;
let startDay=new Date("9/21/2023");
startDay.setUTCHours(0,0,0,0);
let endDay=new Date("9/23/2023");
endDay.setHours(23,59,59,999);
let activity = "social";
let include_mental = activity === "total" || activity === "mental";
let include_physical = activity === "total" || activity === "physical";
let include_social = activity === "total" || activity === "social";
let include_spiritual = activity === "total" || activity === "spiritual";
db.self_care_stats.aggregate([
  {
    $match: {
      DateTime: {
        $gte: (new Date(startDay)).setUTCHours(0, 0, 0, 0),
        $lte: (new Date(endDay)).setUTCHours(23, 59, 59, 999)
      }
    }
  },
  {
    $group: {
      _id: {
        DateTime: { $dateToString: { format: "%Y-%m-%d", date: "$DateTime" } },
        Name: "$name"
      },
      total_health_time: {
        $sum: {
          $add: [
            {
              $cond: [include_mental, { $toInt: { $ifNull: ["$mental_health_time", 0] } }, 0]
            },
            {
              $cond: [include_physical, { $toInt: { $ifNull: ["$physical_health_time", 0] } }, 0]
            },
            {
              $cond: [include_spiritual, { $toInt: { $ifNull: ["$spiritual_health_time", 0] } }, 0]
            },
            {
              $cond: [include_social, { $toInt: { $ifNull: ["$societal_health_time", 0] } }, 0]
            }
          ]
        }
      },
      mental_care_activities: {
        $push: {
          $cond: {
            if: {
              $and: [
                include_mental, 
                { $ne: [
                  { $ifNull: ["$mental_health_activity", null] },
                  null
                ] }, // Check if mental_health_activity is not null
              ]},
            then: ["$mental_health_activity", { $ifNull: ["$mental_health_time", 0] }],  
            else: []          
          }
        }
      },
      physical_care_activities: {
        $push: {
          $cond: {
            if: {
              $and: [
                include_physical,
                { $ne: [
                  { $ifNull: ["$physical_health_activity", null] },
                  null
                ] }, // Check if physical_health_activity is not null
              ]},
            then: ["$physical_health_activity", { $ifNull: ["$physical_health_time", 0] }],            
            else: []
          }
        }
      },
      spiritual_care_activities: {
        $push: {
          $cond: {
            if: {
              $and: [
                include_spiritual, 
                { $ne: [
                  { $ifNull: ["$spiritual_health_activity", null] },
                  null
                ] }, // Check if spiritual_health_activity is not null
              ]},
            then: ["$spiritual_health_activity", { $ifNull: ["$spiritual_health_time", 0] }],
            else: []
          }
        }
      },
      social_care_activities: {
        $push: {
          $cond: {
            if: {
              $and: [
                include_social,
                { $ne: [
                  { $ifNull: ["$societal_health_activity", null] },
                  null
                ] }, // Check if social_health_activity is not null
              ]},
            then: ["$societal_health_activity", { $ifNull: ["$societal_health_time", 0] }],
            else: []
          }
        }
      }      
    }
  },
  {
    $sort: { "_id.DateTime": 1, "total_health_time": 1 }
  },
  {
    $group: {
      _id: "$_id.DateTime",
      values: { $push: "$total_health_time" },
      activities: {
        $push: {
          total_health_time: "$total_health_time",
          self_care_activities: {
            $concatArrays: [
              "$mental_care_activities", 
              "$physical_care_activities", 
              "$spiritual_care_activities",
              "$social_care_activities", 
            ]          
          }
        }
      },
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      ptile: {
        $arrayElemAt: ["$values", { $floor: { $multiply: ["$count", x / 100] } }]
      },
      activities: 1  
    }
  },
  {
    $project: {
      ptile: "$ptile",
      activities: {
        $reduce: {
          input: "$activities",
          initialValue: [],
          in: {
            $cond: {
              if: { $lte: ["$$this.total_health_time", "$ptile"] },
              then: { $concatArrays: ["$$value", "$$this.self_care_activities"] },
              else: "$$value"
            }
          }
        }
      }
    }
  }  
]);

/* Find all activities and time over time period */
use('amplifycares-db-catita');
let username="sidm@microsoft.com";
let startDate = (new Date("2023-09-01T00:00:00.000Z"));
startDate.setUTCHours(0,0,0,0);
let endDate = new Date("2023-09-21T00:00:00.000Z");
endDate.setHours(23,59,59,999);
db.self_care_stats.aggregate([
  {
    $match: {
      name: username,
      DateTime: {
        $gte: startDate,
        $lte: endDate,
      },
    },
  },
  {
    $project: {
      DateTime: 1,
      activities: {
        $concatArrays: [
          [["$mental_health_activity", "$mental_health_time"]],
          [["$physical_health_activity", "$physical_health_time"]],
          [["$spiritual_health_activity", "$spiritual_health_time"]],
          [["$societal_health_activity", "$societal_health_time"]]          
        ],
      },
    },
  },
  {
    $unwind: "$activities",
  },
  {
    $group: {
      _id: {
        date: { $dateToString: { format: "%Y-%m-%d", date: "$DateTime" } },
        activity: "$activities[0][0]",
      },
      total_time: { $sum: "$activities[0][1]" },
    },
  },
  /*{
    $sort: { "_id.date": 1, "_id.activity": 1 },
  }*/
]);

/* Find median of mental health time across teams */
use('amplifycares-db-catita');
let startDay = (new Date("2023-09-01T00:00:00.000Z"));
startDay.setUTCHours(0,0,0,0);
let endDay = new Date("2023-09-21T00:00:00.000Z");
endDay.setHours(23,59,59,999);
db.team_info.aggregate([
  {
    $match: {
      "team_members": { $exists: true, $not: {$size: 0} }
    }
  },
  {
    $lookup: {
      from: "self_care_stats",
      localField: "team_members.member_id",
      foreignField: "name",
      as: "team_members"
    }
  },
  {
    $unwind: "$team_members"
  },
  {
    $match: {
      "team_members.DateTime": {
        $gte: startDay,
        $lte: endDay,
      }
    }
  },
  {
    $group: {
      _id: {
        team_name: "$team_name",
        team_member_name: "$team_members.name"
      },
      total_time: {
        $sum: {
          $add: [
            { $toInt: { $ifNull: ["$team_members.mental_health_time", 0] } },
            { $toInt: { $ifNull: ["$team_members.physical_health_time", 0] } },
            { $toInt: { $ifNull: ["$team_members.spiritual_health_time", 0] } },
            { $toInt: { $ifNull: ["$team_members.societal_health_time", 0] } },                                          
          ]
        }
      }
    }
  },
  {
    $sort: { "team_name":1, "total_time": -1 }
  },
  {
    $group: {
      _id: "$_id.team_name",
      times: { $push: "$total_time" }
    }
  },
  {
    $project: {
      _id: 1,
      times: 1,
      count: { $size: "$times" }
    }
  },
  {
    $project: {
      median: {
        $cond: [
          { $eq: [{ $mod: [ "$count", 2 ] }, 0 ] },
          { $avg: [{ $slice: ["$times", { $subtract: [ { $divide: ["$count", 2] }, 1 ]}, 2] }] },
          { $arrayElemAt: [ "$times", { $divide: [ { $subtract: [ "$count", 1 ] }, 2 ] } ] }
        ]
      }
    }
  },
  {
    $project: {
      _id: 1,
      median: {
        $ceil: { $divide: ["$median", 1] }
      }
    }
  },
   {
    $sort: { "median": -1 }
  },
]);



/* All details on a particular date */
use('amplifycares-db-catita');
db.self_care_stats.find({$and:[{DateTime:{$gte: new Date("2023-09-15T00:00:00.000Z")}}, {DateTime:{$lte: new Date("2023-09-31T00:00:00.000Z")}}]}).sort({"_id":1});

/* All details sorted by date*/
use('amplifycares-db-catita');
db.self_care_stats.find(
  {DateTime:{$gte: new Date("2023-09-20")}}, 
  ).sort({DateTime:-1}).toArray();

/* All details for a person */
use('amplifycares-db-catita');
db.self_care_stats.find({name: "sid@catita365.onmicrosoft.com"}).sort({DateTime:-1});


/* All user info */
use('amplifycares-db-catita');
db.userInfo.find({username: {$regex:"ja*"}});

use('amplifycares-db-catita');
db.userInfo.find().sort({_id:1});

/* Delete some user info */
use('amplifycares-db-catita');
db.userInfo.deleteMany({username:"sidm@microsoft.com"});

/* All details for a person on a particular date */
use('amplifycares-db-catita');
db.self_care_stats.find({name:"sidm@microsoft.com", DateTime:{$gte: new Date('2023-09-10')}});

// show all documents that have string format for DateTime
use('amplifycares-db');
db.self_care_stats.find(
  { DateTime: { $not: { $type: "date" } } }
);

// find and delete all documents that have DateTime in the string format
use('amplifycares-db');
db.self_care_stats.updateMany(
  { DateTime: { $not: { $type: "date" } } },
  { $set: {DateTime: new Date()} }
  );

// strip out documents that have 0 for mental health time 
use('amplifycares-db-catita');
db.self_care_stats.updateMany(
  { mental_health_time: 0},
  { $unset: {
      mental_health_time: "",
      mental_health_activity: "",
    } 
  }
);

// strip out documents that have 0 for physical health time 
use('amplifycares-db-catita');
db.self_care_stats.updateMany(
  { physical_health_time: 0},
  { $unset: {
      physical_health_time: "",
      physical_health_activity: "",
    } 
  }
);

// strip out documents that have 0 for spiritual health time 
use('amplifycares-db-catita');
db.self_care_stats.updateMany(
  { spiritual_health_time: 0},
  { $unset: {
      spiritual_health_time: "",
      spiritual_health_activity: "",
    } 
  }
);

// strip out documents that have 0 for social health time 
use('amplifycares-db-catita');
db.self_care_stats.updateMany(
  { societal_health_time: 0},
  { $unset: {
      societal_health_time: "",
      societal_health_activity: "",
    } 
  }
);

// aggregate each of the times for Sid
/*db.self_care_stats.aggregate([{$match:{name:{$regex:".*"}}}, 
{$group: {_id:"$name", 
total_mental_health: {$sum:{$add:[{$toInt: "$mental_health_time"}]}},
total_physical_health: {$sum:{$add:[{$toInt: "$physical_health_time"}]}},
total_spiritual_health: {$sum:{$add:[{$toInt: "$spiritual_health_time"}]}},
total_societal_health: {$sum:{$add:[{$toInt: "$societal_health_time"}]}},
}}])*/

// count the number of mental health time entries for name sid
use('amplifycares-db');
db.self_care_stats.aggregate([{$match:{name:"Sid"}}, {$group: {_id:"$name", total_count:{$sum:1}}}])



// query non integer values
use('amplifycares-db');
db.self_care_stats.find({ physical_health_time: { $not: { $type: "number" } } });

// replace non integer values with integers
use('amplifycares-db');
db.self_care_stats.find({ societal_health_time: { $exists: true, $type: "string" } }).forEach(function(doc) {
  var updatedValue = parseInt(doc.societal_health_time);
  db.self_care_stats.updateOne({ _id: doc._id }, { $set: { societal_health_time: updatedValue } });
});


// get all recommendations
use('amplifycares-db-catita');
db.recommendations.find();

// set all recommendations to be DIY 
use('amplifycares-db-catita');
db.recommendations.updateMany(
  {},
  {
    $set: {
      participants: []
    }
  },
  { upsert: true }
);

// get all recommendations of specific type
use('amplifycares-db-catita');
db.recommendations.find({type:1});

// delete some recommendations 
use('amplifycares-db-catita');
db.recommendations.deleteMany({title: {$regex:"Dance and *"}}, {contributor: {$regex:"sidm@*"}});

use('amplifycares-db-catita');
db.recommendation_comments.createIndex({ "date": -1 });

// get all recommendation comments
use('amplifycares-db-catita');
db.recommendation_comments.find().sort({date:1});

// add recommendations
use('amplifycares-db-catita');
db.recommendation_comments.insertOne({
  user: "yangpan@microsoft.com",
  text: "Spent time on this activity. Loved it! ",
  date: 1700523158802,
  recommendation_id: "6534854ae5237b35b40d7742" 
  });

// find all reactions for a comment
use('amplifycares-db-catita');
db.recommendation_comments.aggregate([
  {
    $match: { recommendation_id: '6534854ae5237b35b40d7742' } // Match documents with the specified recommendation_id
  },
  {
    $project: {
      comment_id_string: { $toString: '$_id' }, // Cast _id to string and rename it
      user: 1,
      text: 1,
      date: 1,
      recommendation_id: 1,
    }
  },
  {
    $lookup: {
      from: 'reactions_info', // The name of the reactions collection
      localField: 'comment_id_string', // The field from the comments collection to match
      foreignField: 'comment_id', // The field from the reactions collection to match
      as: 'reactions' // The name of the field to store the reactions
    }
  },
  {
    $sort: { date: -1 } // Sort the comments by date in descending order
  }
])

use('amplifycares-db-catita');
db.recommendation_comments.findOne({}, { _id: 1 })
db.reactions_info.findOne({}, { comment_id: 1 })

 // show reactions
 use('amplifycares-db-catita');
 db.reactions_info.find({comment_id:"6568bbd1e0d260102472800d"});

// show all databases
show databases;

/* DDL */
// create a new db with scaffolding
use(`amplifycares-db-catita`);

  // create a collection for teams
  db.createCollection("team_info", {
    validator: { $jsonSchema: {
        bsonType: "object",
        required: [ "team_name", "team_members" ],
        properties: {
          team_name: {
              bsonType: "string",
              description: "must be a string and is required"
          },
          team_members: {
              bsonType: "array",
              description: "must be an array of strings and is required",
              items: {
                bsonType: "string"
              }
          }
        }
    } }
  });

  // populate teams
  use(`amplifycares-db-catita`);
  db.team_info.insertOne({
    team_name: "Team Manohar",
    team_members: [
      { member_id: "ramadhir@microsoft.com" },
      { member_id: "yangpan@microsoft.com" },
      { member_id: "barbwong@microsoft.com" },
      { member_id: "nizachar@microsoft.com" },
      { member_id: "kkhilnani@microsoft.com" },
    ]
  });
  db.team_info.insertOne({
    team_name: "Muni Rockz",
    team_members: [
      { member_id: "muni@catita365.onmicrosoft.com" },
    ]
  });
  db.team_info.insertOne({
    team_name: "Sid Codz",
    team_members: [
      { member_id: "sid@catita365.onmicrosoft.com" },
    ]
  });
  db.team_info.insertOne({
    team_name: "Other Team",
    team_members: [
      { member_id: "Alice" },
    ]
  });

  // create a collection for recomendations
  db.createCollection("recommendations", {
    validator: { $jsonSchema: {
        bsonType: "object",
        required: [ "title", "type", "contributor", "url" ],
        properties: {
          title: {
              bsonType: "string",
              description: "must be a string and is required"
          },
          type: {
              bsonType: "number",
              description: "must be a number and is required",            
          },
          contributor: {
            bsonType: "string",
            description: "must be a string and is required"
          },
          url: {
            bsonType: "string",
            description: "must be a string and is required"
          },
        }
    } }
  });

  // populate recommendations
  db.recommendations.insertOne({
    title: "Achieve Peak Home Workouts",
    contributor: "Sid",
    type: 2,
    url: "https://www.youtube.com/watch?v=TUFOl8hm8KU"
  });
  db.recommendations.insertOne({
    title: "Brahma Kumari Meditation",
    contributor: "Sid",
    type: 1,
    url: "https://www.youtube.com/watch?v=fgChzlOt3XI"
  });
  db.recommendations.insertOne({
    title: "SGI Buddhishm",
    contributor: "Sid",
    type: 3,
    url: "https://www.sgi-usa.org/"
  });
  db.recommendations.insertOne({
    title: "Benevity Giving",
    contributor: "Sid",
    type: 4,
    url: "https://microsoft.benevity.org/"
  });

  // create a collection for user info
  use(`amplifycares-db-catita`);
  db.createCollection("userInfo", {
    username: {
      type: String,
      required: true,
      unique: true,
    },
    lastLoginTime: {
      type: Date,
      default: Date.now,
    },
    badgesEarned: {
      type: [String],
      default: [],
    },
    badgesOnTrack: {
      type: [String],
      default: [],
    }
  });

// version number
use('amplifycares-db');
db.version()

// set compatibility
use('amplifycares-db');
db.runCommand({collMod: "self_care_stats", "validator": {}, "validationLevel": "off", "validationAction": "warn", "indexOptionDefaults": {"background": true}, "storageEngine": {"wiredTiger": {}}, "viewOn": null, "pipeline": null, "collation": {"locale": "en_US", "caseLevel": false, "caseFirst": "off", "strength": 2, "numericOrdering": false, "alternate": "non-ignorable", "maxVariable": "punct", "normalization": false, "backwards": false, "version": "57.1"}, "maxTimeMS": null, "expireAfterSeconds": null, "autoIndexId": true, "readConcern": {"level": "local"}, "writeConcern": {"w": "majority", "wtimeout": 0, "provenance": null, "journal": true}, "readPreference": {"mode": "primary", "tagSet": null, "maxStalenessSeconds": null, "hedge": null, "nonStale": false, "readOnly": false, "nearest": null, "secondaryAcceptableLatencyMS": null, "acceptableLatencyMS": null, "tags": []}, "hint": null, "comment": null, "minWireVersion": null, "maxWireVersion": null, "retryWrites": true, "features": {}, "scale": 1, "writeConcernMajorityJournalDefault": true, "shardDistribution": null, "key": {"_id": 1}, "unique": null, "version": null, "collationAlternate": null, "hidden": false, "excludeIndexesForCopy": null, "bypassDocumentValidation": false, "featureCompatibilityVersion": "4.0"})

// update all fields to be integers
use('amplifycares-db');
db.self_care_stats.updateMany(
  {},
  {
      $set: {
        mental_health_time: {
          $convert: {
          input: "$mental_health_time",
          to: "int"
         }
        }
      }
  }
)

// add a new column for datetime
use('amplifycares-db');
db.self_care_stats.updateMany(
  {},
  {
    $set: {
      DateTime: new Date()
    }
  },
  { upsert: true }
);

// ensure no 2 teams with same name
use('amplifycares-db');
db.team_info.createIndex({ "team_name": 1 }, { unique: true});

// ensure a single person cannot be part of more than 1 team
use('amplifycares-db');
db.team_info.createIndex({ "team_members.member_id": 1 }, { unique: true});

// drop the index 
use('amplifycares-db');
db.team_details.dropIndex({ "team_members.member_id": 1 });

/* DML */

/* Replace all names */
use('amplifycares-db');
db.self_care_stats.updateMany(
   { name: "3rd person" },
   { $set: { name: "Jill" } }
)


/* set dates in succession */
use('amplifycares-db');
const startDate = new Date('2023-02-10T00:00:00Z');
const documents = db.self_care_stats.find({name:"Jill"}).sort({_id: 1});
let currentDate = new Date(startDate);
while (documents.hasNext()) {
  const document = documents.next();
  db.self_care_stats.updateOne({_id: document._id}, {$set: {DateTime: currentDate}});
  currentDate = new Date(currentDate.getTime() + (24 * 60 * 60 * 1000)); // add 1 day in milliseconds
}

/* add data for a few fake users */
use('amplifycares-db');
const names = ["Alice", "Bob", "Charlie", "David", "Emma", "Frank", "Grace", "Henry", "Isabella", "John", "Kate", "Liam", "Mia", "Nora", "Oliver", "Penny", "Quinn", "Ruby", "Sophia", "Thomas", "Una", "Violet", "William", "Xander", "Yara", "Zoe"];
const startDate = new Date('2023-02-10T00:00:00Z');
for (let i = 0; i < names.length; i++) {
  const name = names[i];
  for (let j = 0; j < 30; j++) {
    db.self_care_stats.insertOne({
      name: name,
      mental_health_time: Math.floor(Math.random() * 30),
      physical_health_time: Math.floor(Math.random() * 30),
      spiritual_health_time: Math.floor(Math.random() * 30),
      societal_health_time: Math.floor(Math.random() * 30),
      DateTime: new Date((startDate).getTime() + j*24*60*60*1000),
    });
  }
}


/* add data for a few fake teams */
use('amplifycares-db');
db.team_info.insertOne({
  team_name: "Team1",
  team_members: [
    { member_id: "Alice" },
    { member_id: "Bob" },
    { member_id: "Charlie" },
    { member_id: "David" }
  ]
});

use('amplifycares-db');
db.team_info.insertOne({
  team_name: "Team2",
  team_members: [
    { member_id: "Emma" },
    { member_id: "Frank" },
    { member_id: "Grace" },
    { member_id: "Henry" },
    { member_id: "Isabella" }
  ]
});

use('amplifycares-db');
db.team_info.insertOne({
  team_name: "Team3",
  team_members: [
    { member_id: "John"}, 
    { member_id: "Kate" },
    { member_id: "Liam" },
    { member_id: "Mia" },
    { member_id: "Oliver" },
    { member_id: "Nora" }
  ]
});


use('amplifycares-db');
db.team_info.insertOne({
  team_name: "Team4",
  team_members: [
    { member_id: "Oliver"}, 
    { member_id: "Penny" },
    { member_id: "Quinn" },
    { member_id: "Ruby" },
    { member_id: "Sophia" },
    { member_id: "Una" },
    { member_id: "Violet" },
    { member_id: "Thomas" }
  ]
});

use('amplifycares-db');
db.team_info.insertOne({
  team_name: "Team5",
  team_members: [
    { member_id: "William"}, 
    { member_id: "Xander" },
    { member_id: "Yara" },
    { member_id: "Zoe" }
  ]
});

/* DML for Recommendations */
use('amplifycares-db');
db.recommendations.insertOne({
  title: "Running Book",
  contributor: "Sid",
  type: 2,
  url: "http://www.cnn.com"
});
db.recommendations.insertOne({
  title: "Meditation Video",
  contributor: "Bob",
  type: 1,
  url: "http://www.youtube.com"
});
db.recommendations.insertOne({
  title: "Hinduism",
  contributor: "Alice",
  type: 3,
  url: "http://www.gita.com"
});